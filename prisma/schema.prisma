// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid()) @map("_id")
  email     String   @unique
  name      String?
  villageId String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  village Village? @relation(fields: [villageId], references: [id], onDelete: Cascade)

  money         MoneyJimpitan[]
  contributions Contribution[]
  jimpitan      Jimpitan[]
  schedule      Schedule[]
}

model Village {
  id           String   @id @default(uuid()) @map("_id")
  address      String
  rt           Int
  rw           Int
  urbanVillage String
  subdistrict  String
  regency      String
  link         String   @default(cuid())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  users         User[]
  contributions Contribution[]
  jimpitan      Jimpitan[]
  schedule      Schedule[]
  MoneyJimpitan MoneyJimpitan[]
}

model Contribution {
  id        String   @id @default(uuid()) @map("_id")
  admission String
  money     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id])
  userId String

  village   Village @relation(fields: [villageId], references: [id])
  villageId String
}

model Jimpitan {
  id    String @id @default(uuid()) @map("_id")
  block String

  village   Village @relation(fields: [villageId], references: [id])
  villageId String

  assign   User   @relation(fields: [assignId], references: [id])
  assignId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Schedule {
  id  String @id @default(uuid()) @map("_id")
  day String

  user   User   @relation(fields: [userId], references: [id])
  userId String

  village   Village @relation(fields: [villageId], references: [id])
  villageId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model MoneyJimpitan {
  id String @id @default(uuid()) @map("_id")

  money String
  block String

  user   User   @relation(fields: [userId], references: [id])
  userId String

  village   Village @relation(fields: [villageId], references: [id])
  villageId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
